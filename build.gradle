buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE")
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.6'
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

group = 'com.ignoretheextraclub'
version = '0.1.0'

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

ext {
    mongo = "mongo"
    graphite = "graphite"
    dockerHub = "dockerHub"
}

dependencies {

    compile 'org.springframework.data:spring-data-mongodb:1.10.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'com.github.funkybookends:SiteswapFactory:0.0.1'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'joda-time:joda-time:2.9.7'
    compile 'org.mongodb:mongodb-driver:3.4.2'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.thymeleaf.extras:thymeleaf-extras-java8time'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'io.dropwizard.metrics:metrics-graphite:3.2.1'
    compile 'io.dropwizard.metrics:metrics-core:3.2.1'
    compile 'org.eclipse.mylyn.wikitext:wikitext.mediawiki:0.9.4.I20090220-1600-e3x'


    testCompile 'junit:junit:4.12'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.security:spring-security-test'
    testCompile 'org.assertj:assertj-core:3.6.2'

}

bootRepackage {
    mainClass = 'com.ignoretheextraclub.IgnoreTheExtraClubApplication'
}

jar {
    baseName = 'ignoretheextraclub'
    version =  '0.1.0'
}

task startMongo(type: DockerStartContainer) {
    containerId = mongo
}

task restartMongo(type: DockerRestartContainer) {
    containerId = mongo
}

task stopMong(type: DockerStopContainer) {
    containerId = mongo
}

task getMongo(type: DockerPullImage) {
    repository = mongo
}

task startGraphite(type: DockerStartContainer) {
    containerId = graphite
}

task restartGraphite(type: DockerRestartContainer) {
    containerId = graphite
}

task getGraphite(type: DockerPullImage) {
    repository = graphite
}

task v(type: DockerListImages) {}